vacuum_probabilities <- tibble(d, p=p+(1-sum(vacuum_probabilities$p))/length(probabilities$p))
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities$p <- vacuum_probabilities$p*1/max(vacuum_probabilities$p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
p <- 1/(rev(d)-(d[1]-1))/length(d)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
list <- c(0, 1, 2, 3, 4, 5)
list
sum(list)
list <- list - (5/15)
sum(list)
list <- list - (5/5)
sum(list)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
list <- c(0, 1, 2, 3, 4, 5)
list
sum(list)
list <- list - (5/5)
sum(list)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p)
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
list <- c(0, 1, 2, 3, 4, 5)
list
sum(list)
list <- list - (5/6)
sum(list)
sum(list)
list <- c(1, 2, 3)
sum(list)
1-sum(list)
a <- 1-sum(list)
sum(list) - a
sum(list) + a
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=(p+(1-sum(list))/length(p)))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
list <- c(1, 2, 3)
sum(list)
a <- 1-sum(list)
sum(list) + a
sum(vacuum_probabilities$p)
vacuum_probabilities <- tibble(d, p=(p-(1-sum(list))/length(p)))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
vacuum_probabilities <- tibble(d, p=(p-abs(1-sum(list))/length(p)))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p-abs(1-sum(list))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p-abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p+abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
probabilities_mixed <- tibble(d, (vacuum_probabilities$p+probabilities$p)/2)
probabilities_mixed %>% ggplot(aes(d, p)) + geom_col() + geom_point()
probabilities_mixed <- tibble(d, p=(vacuum_probabilities$p+probabilities$p)/2)
sum(probabilities_mixed$p)
probabilities_mixed %>% ggplot(aes(d, p)) + geom_col() + geom_point()
probabilities_mixed %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
sum(probabilities_mixed$p)
sum(probabilities_mixed$p[1:5])
sum(probabilities_mixed$p[1:7])
sum(probabilities_mixed$p[1:5])
library(tidyverse)
library(lubridate)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p+abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:5])
sum(vacuum_probabilities$p)
sum(probabilities$p)
probabilities_mixed <- tibble(d, p=(vacuum_probabilities$p+probabilities$p)/2)
sum(probabilities_mixed$p[1:5])
probabilities_mixed %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
library(tidyverse)
library(MASS)
library(nnet)
library(caret)
library(glmnet)
library(ISLR2)
default <- Default
head(default)
logit <- glm(default ~ income + balance, data = default, family = binomial(link="logit"))
summary(logit)
set.seed(1)
# split the dataset into training and testing sets
training_samples <- default$default %>%
createDataPartition(p = 0.8, list = FALSE)
train_data  <- default[training_samples, ]
test_data <- default[-training_samples, ]
# check it worked properly
dim(train_data); dim(test_data)
# Fit a logistic model
logit <- glm(default ~ income + balance, data = train_data, family = binomial(link="logit"))
# summary(logit)
# Make predictions for the full model
logit_pred <- predict(logit, newdata=test_data, "response")
logit_predicted_classes <- as.factor(ifelse(logit_pred > 0.5, "Yes", "No"))
# Let's make a table
logit_table <- table(test_data$default, logit_predicted_classes)
caret::confusionMatrix(logit_table)
set.seed(1)
# split the dataset into training and testing sets
training_samples <- default$default %>%
createDataPartition(p = 0.3, list = FALSE)
train_data  <- default[training_samples, ]
test_data <- default[-training_samples, ]
# Fit a logistic model
logit <- glm(default ~ income + balance, data = train_data, family = binomial(link="logit"))
# summary(logit)
# Make predictions for the full model
logit_pred <- predict(logit, newdata=test_data, "response")
logit_predicted_classes <- as.factor(ifelse(logit_pred > 0.5, "Yes", "No"))
# Let's make a table
logit_table <- table(test_data$default, logit_predicted_classes)
caret::confusionMatrix(logit_table)
set.seed(1)
# split the dataset into training and testing sets
training_samples <- default$default %>%
createDataPartition(p = 0.5, list = FALSE)
train_data  <- default[training_samples, ]
test_data <- default[-training_samples, ]
# Fit a logistic model
logit <- glm(default ~ income + balance, data = train_data, family = binomial(link="logit"))
# summary(logit)
# Make predictions for the full model
logit_pred <- predict(logit, newdata=test_data, "response")
logit_predicted_classes <- as.factor(ifelse(logit_pred > 0.5, "Yes", "No"))
# Let's make a table
logit_table <- table(test_data$default, logit_predicted_classes)
caret::confusionMatrix(logit_table)
set.seed(1)
# split the dataset into training and testing sets
training_samples <- default$default %>%
createDataPartition(p = 0.75, list = FALSE)
train_data  <- default[training_samples, ]
test_data <- default[-training_samples, ]
# Fit a logistic model
logit <- glm(default ~ income + balance, data = train_data, family = binomial(link="logit"))
# summary(logit)
# Make predictions for the full model
logit_pred <- predict(logit, newdata=test_data, "response")
logit_predicted_classes <- as.factor(ifelse(logit_pred > 0.5, "Yes", "No"))
# Let's make a table
logit_table <- table(test_data$default, logit_predicted_classes)
caret::confusionMatrix(logit_table)
set.seed(1)
# split the dataset into training and testing sets
training_samples <- default$default %>%
createDataPartition(p = 0.75, list = FALSE)
train_data  <- default[training_samples, ]
test_data <- default[-training_samples, ]
# Fit a logistic model
logit <- glm(default ~ income + balance + as.factor(student), data = train_data, family = binomial(link="logit"))
# summary(logit)
# Make predictions for the full model
logit_pred <- predict(logit, newdata=test_data, "response")
logit_predicted_classes <- as.factor(ifelse(logit_pred > 0.5, "Yes", "No"))
# Let's make a table
logit_table <- table(test_data$default, logit_predicted_classes)
caret::confusionMatrix(logit_table)
sessionInfo()
library(tidyverse)
library(lubridate)
library(ggthemes)
d <- day(Sys.Date()):28
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p+abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(28-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(28-day(Sys.Date()))
sum(probabilities$p[1:r])
sum(vacuum_probabilities$p)
sum(probabilities$p)
# DAY RANGE
r <- 7
# probabilities_mixed <- tibble(d, p=(vacuum_probabilities$p+probabilities$p)/2)
probabilities_mixed <- tibble(d, p=(probabilities$p*(vacuum_probabilities$p/max(vacuum_probabilities$p)))*1.805)
probabilities_mixed$section <- rep("b", length(probabilities_mixed$d))
probabilities_mixed$section[1:r] <- "a"
probabilities_mixed$section <- as.factor(probabilities_mixed$section)
sum(probabilities_mixed$p)
probabilities_mixed %>% ggplot(aes(d, p, fill=section)) +
geom_col() + geom_line() + geom_point() + theme_fivethirtyeight()
sum(probabilities_mixed$p[1:r])
return(c(1+y-a*x^2, b*x))
henon <- function(x, y, a=0.15, b=0.6){
return(c(1+y-a*x^2, b*x))
}
henon(0.2, 0.6)
henon(1.594, 0.120)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zeallot)
library(gganimate)
library(gifski)
library(tidyverse)
library(lubridate)
library(ggthemes)
end <- 28+7
d <- day(Sys.Date()):end
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p+abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(end-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(end-day(Sys.Date()))
sum(probabilities$p[1:r])
sum(vacuum_probabilities$p)
sum(probabilities$p)
# DAY RANGE
r <- 7
# probabilities_mixed <- tibble(d, p=(vacuum_probabilities$p+probabilities$p)/2)
probabilities_mixed <- tibble(d, p=(probabilities$p*(vacuum_probabilities$p/max(vacuum_probabilities$p)))*1.78)
probabilities_mixed$section <- rep("b", length(probabilities_mixed$d))
probabilities_mixed$section[1:r] <- "a"
probabilities_mixed$section <- as.factor(probabilities_mixed$section)
sum(probabilities_mixed$p)
probabilities_mixed %>% ggplot(aes(d, p, fill=section)) +
geom_col() + geom_line() + geom_point() + theme_fivethirtyeight()
sum(probabilities_mixed$p[1:r])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(ggrepel)
library(magic)
a <- 1:10
a <- 1:10
a
x <- -10:10
y <- 10:-10
tibble(x, y)
x <- -10:10
y <- 10:-10
data.frame(x, y)
tibble(x, y)
x <- -10:10
y <- 10:-10
tibble(x, y) %>% ggplot(aes(x, y))
x <- -10:10
y <- 10:-10
tibble(x, y) %>% ggplot(aes(x, y)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(ggrepel)
library(magic)
library(lubridate)
end <- 28+7
d <- day(Sys.Date()):end
p <- 1/(rev(d)-(d[1]-1))/length(d)
vacuum_probabilities <- tibble(d, p=p+abs(1-sum(p))/length(p))
vacuum_probabilities %>% ggplot(aes(d, p)) + geom_col() + geom_line() + geom_point()
probabilities <- tibble(d, p=rep(1/(end-day(Sys.Date()))))
probabilities %>% ggplot(aes(d, p)) + geom_col()
probabilities$p <- probabilities$p - (sum(probabilities$p) - 1)/(end-day(Sys.Date()))
sum(probabilities$p[1:r])
sum(vacuum_probabilities$p)
sum(probabilities$p)
# DAY RANGE
r <- 7
# probabilities_mixed <- tibble(d, p=(vacuum_probabilities$p+probabilities$p)/2)
probabilities_mixed <- tibble(d, p=(probabilities$p*(vacuum_probabilities$p/max(vacuum_probabilities$p)))*1.78)
probabilities_mixed$section <- rep("b", length(probabilities_mixed$d))
probabilities_mixed$section[1:r] <- "a"
probabilities_mixed$section <- as.factor(probabilities_mixed$section)
sum(probabilities_mixed$p)
probabilities_mixed %>% ggplot(aes(d, p, fill=section)) +
geom_col() + geom_line() + geom_point() + theme_fivethirtyeight()
sum(probabilities_mixed$p[1:r])
end <- 28+7
d <- day(Sys.Date()):end
p <- 1/(rev(d)-(d[1]-1))/length(d)
end <- 28+7
d <- day(Sys.Date()):end
p <- 1/(rev(d)-(d[1]-1))/length(d)
x_0 <- 0
y_0 <- 0
a <- 0.155; b <- 0.6
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x=x_coord_list, y=y_coord_list)) + geom_point(size=0.5)
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates
henon_coordinates %>% ggplot(aes(x=x_coord_list, y=y_coord_list)) + geom_point(size=0.5)
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 100
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 10
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 100
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 1000
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 10000
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_path()
# TODO: Sketch a time series plot for this
n <- 10000
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1) + geom_dotplot()
n <- 10000
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
# TODO: Sketch a time series plot for this
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(ggrepel)
library(magic)
library(lubridate)
library(zeallot)
c <- c(-.63+.43i, -1+.284i, 3+.5i, -5+.25, -.1-.99i, -.77+.25i, -1.4-.2i, 0.67+.4i,
-.337-.639i, .382+.37i, -.9+.3i, -1.2+.25i, .185+.58, 0.134+0.6i,
.378+2.87i, -.72+.3088i, -.32-.62i, 1.7+1.3i)
name <- c("snowflakes", "the eternal fire", "dish detergent", "hard-boiled egg cut in 1/2",
"toothpicks", "whirlpool", "scar tissue", "broccoli", "secret snail",
"cyclones", "two-headed snake", "thin ice", "hotdog", "octobus bad day",
"Avalon city NJ", "flowers of the universe", "Susan", "little guys with eyes") # student-assigned name of the fractal
tibble(c, name)
real <- Re(c); imaginary <- Im(c)
tibble(real, imaginary) %>% ggplot(aes(real, imaginary)) + geom_point() + coord_equal()
n <- 10000
x_0 <- 0.8
y_0 <- 1
a <- 0.155; b <- 0.6
henon_next_point <- function(x, y, a, b){
new_x <- y+1-a*x^2
new_y <- b*x
return(list(new_x, new_y))
}
find_coordinates_for_n_iterations <- function(x_0, y_0, n){
x_coord_list = c(x_0)
y_coord_list = c(y_0)
x <- NA; y <- NA
for(i in 1:n){
c(x,y) %<-% henon_next_point(tail(x_coord_list, 1),
tail(y_coord_list, 1), a, b)
x_coord_list = c(x_coord_list,x)
y_coord_list = c(y_coord_list, y)
}
return(tibble(x_coord_list, y_coord_list))
}
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.5)
x_0 <- 0
y_0 <- 0
a <- 0.155; b <- 0.6
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.5)
x_0 <- 0
y_0 <- 0
a <- 1.4; b <- 0.3
henon_coordinates <- find_coordinates_for_n_iterations(x_0, y_0, n)
henon_coordinates %>% ggplot(aes(x_coord_list, y_coord_list)) + geom_point(size=0.1)
# TODO: Sketch a time series plot for this
reticulate::repl_python()
